        C = C[, -1]/C[, 1]
## @knitr end
#      points(C, col = i + 1, pch = 19)
## @knitr kmeans-main-2
      if(nrow(C) < num.clusters) {
        C = 
          rbind(
            C,
            matrix(
              rnorm(
                (num.clusters - 
                   nrow(C)) * nrow(C)), 
              ncol = nrow(C)) %*% C) }}
        C}
## @knitr end
## sample runs
## 
out = list()
for(be in c("local", "hadoop")) {
  rmr.options(backend = be)
  set.seed(0)
## @knitr kmeans-data
 ##cutted
## @knitr end
#  x11()
#  plot(P)
#  points(P)
  out[[be]] = 
## @knitr kmeans-run    
    kmeans.mr(
      to.dfs(P),
      num.clusters = 3, 
      num.iter = 100,
      combine = FALSE,
      in.memory.combine = FALSE)
## @knitr end
}
Time <- proc.time() - ptm
out
Time
library(fields)
trainkmeans <- do.call(cbind, out)
ET <- rdist( P[1:754,],trainkmeans[1:3,] )
ET 
library(fields)
trainkmeans <- do.call(cbind, out)
Euclidean <- rdist( Test[1:189,],trainkmeans[1:3,] )
Euclidean 
idx <- apply(ET, 1, function(x) which(x == min(x, na.rm = TRUE)))
idx <- t(idx)
idx
k <- apply(Euclidean, 1, function(x) which(x == min(x, na.rm = TRUE)))
k <- t(k)
k
cls1 <- 0
cls2 <- 0
cls3 <- 0
ClusterOne <- matrix(, nrow = clsLine1 , ncol = 1)
ClusterTwo <- matrix(, nrow = clsLine2 , ncol = 1)
ClusterThree <- matrix(, nrow = clsLine3 , ncol = 1)
for( TRCLS in 1:754)
{
if(idx[1,TRCLS]==1)
{
cls1 <- cls1+1
ClusterOne[cls1,1] <- TRCLS
}
else if(idx[1,TRCLS]==2)
{
cls2 <- cls2+1
ClusterTwo[cls2,1] <- TRCLS
}
else if(idx[1,TRCLS]==3)
{
cls3 <- cls3+1
ClusterThree[cls3,1] <- TRCLS
}
}
clsLine1 <- 0
clsLine2 <- 0
clsLine3 <- 0
for( TRCLS1 in 1:754)
{
if(idx[1,TRCLS1]==1)
{
clsLine1 <- clsLine1+1
}
else if(idx[1,TRCLS1]==2)
{
clsLine2 <- clsLine2+1
}
else if(idx[1,TRCLS1]==3)
{
clsLine3 <- clsLine3+1
}
}
ave3 <- matrix(, nrow = 1 , ncol = 1682)
for(allrank3 in 1:1682)
{
c <- 0
sum <- 0
for(i in 1:clsLine3)
{
index <- ClusterThree[i,1]
if (P[index,allrank3]!=0)
{
c=c+1
sum <- P[index,allrank3] + sum
}
}
if(c==0)
{
ave3[1,allrank3] <- 0
}
else
{
ave3[1,allrank3] <- sum/c
ave3[1,allrank3]=round(ave3[1,allrank3],digits=0)
}
}
ave3
ave1 <- matrix(, nrow = 1 , ncol = 1682)
for(allrank1 in 1:1682)
{
c <- 0
sum <- 0
for(i in 1:clsLine1)
{
index <- ClusterOne[i,1]
if (P[index,allrank1]!=0)
{
c=c+1
sum <- P[index,allrank1] + sum
}
}
if(c==0)
{
ave1[1,allrank1] <- 0
}
else
{
ave1[1,allrank1] <- sum/c
ave1[1,allrank1]=round(ave1[1,allrank1],digits=0)
}
}
ave1
ave1 <- matrix(, nrow = 1 , ncol = 1682)
for(allrank1 in 1:1682)
{
c <- 0
sum <- 0
for(i in 1:clsLine1)
{
index <- ClusterOne[i,1]
if (P[index,allrank1]!=0)
{
c=c+1
sum <- P[index,allrank1] + sum
}
}
if(c==0)
{
ave1[1,allrank1] <- 0
}
else
{
ave1[1,allrank1] <- sum/c
ave1[1,allrank1]=round(ave1[1,allrank1],digits=0)
}
}
ave1
ave2 <- matrix(, nrow = 1 , ncol = 1682)
for(allrank2 in 1:1682)
{
c <- 0
sum <- 0
for(i in 1:clsLine2)
{
index <- ClusterTwo[i,1]
if (P[index,allrank2]!=0)
{
c=c+1
sum <- P[index,allrank2] + sum
}
}
if(c==0)
{
ave2[1,allrank2] <- 0
}
else
{
ave2[1,allrank2] <- sum/c
ave2[1,allrank2]=round(ave2[1,allrank2],digits=0)
}
}
ave2
q()
q()
q()
q()
save.image("C:\\Users\\Amirhossein EP\\Documents\\my projects R\\Final\\1.RData")
ave1
ave2
ave3
RowNames<- data.matrix(Rows, rownames.force = NA)
rowname <- as.numeric(RowNames) 
TN <- 0
TP <- 0
FN <- 0
FP <- 0
for(i in 1:189)
{
for(testandave in 1:1682)
{
if(k[i]==1){
if(Test[i,testandave] > 3 && ave1[1,testandave] > 3 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=3 && ave1[1,testandave]<=3 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>3 && ave1[1,testandave]<=3 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 3 && ave1[1,testandave]>3 && Test[i,testandave]!=0)
{
FP=FP+1
}
}
else if(k[i]==2){
if(Test[i,testandave] > 3 && ave2[1,testandave] > 3 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=3 && ave2[1,testandave]<=3 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>3 && ave2[1,testandave]<=3 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 3 && ave2[1,testandave]>3 && Test[i,testandave]!=0)
{
FP=FP+1
}
}
else if(k[i]==3){
if(Test[i,testandave] > 3 && ave3[1,testandave] > 3 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=3 && ave3[1,testandave]<=3 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>3 && ave3[1,testandave]<=3 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 3 && ave3[1,testandave]>3 && Test[i,testandave]!=0)
{
FP=FP+1
}
}
}
}
TP
FN
FN
TN
Accuracy=TP+TN/TP+FP+TN+FN
Precision=TP/TP+FP
Recall=TP/TP+FN
Accuracy
Precision
Recall
save.image("C:\\Users\\Amirhossein EP\\Documents\\my projects R\\Final\\Final Type 1 - 3cluster.RData")
RowNames<- data.matrix(Rows, rownames.force = NA)
rowname <- as.numeric(RowNames) 
TN <- 0
TP <- 0
FN <- 0
FP <- 0
for(i in 1:189)
{
for(testandave in 1:1682)
{
if(k[i]==1){
if(Test[i,testandave] > 4 && ave1[1,testandave] > 4 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=4 && ave1[1,testandave]<=4 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>4 && ave1[1,testandave]<=4 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 4 && ave1[1,testandave]>4 && Test[i,testandave]!=0)
{
FP=FP+1
}
}
else if(k[i]==2){
if(Test[i,testandave] > 4 && ave2[1,testandave] > 4 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=4 && ave2[1,testandave]<=4 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>4 && ave2[1,testandave]<=4 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 4 && ave2[1,testandave]>4 && Test[i,testandave]!=0)
{
FP=FP+1
}
}
else if(k[i]==3){
if(Test[i,testandave] > 4 && ave3[1,testandave] > 4 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=4 && ave3[1,testandave]<=4 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>4 && ave3[1,testandave]<=4 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 4 && ave3[1,testandave]>4 && Test[i,testandave]!=0)
{
FP=FP+1
}
}
}
}
TP
FN
FN
TN
Accuracy=TP+TN/TP+FP+TN+FN
Precision=TP/TP+FP
Recall=TP/TP+FN
Accuracy
Precision
Recall
q()
load("C:\\Users\\Amirhossein EP\\Documents\\my projects R\\Final Type 1 - 3clusters\\Final Type 1 - 3cluster.RData")
RowNames<- data.matrix(Rows, rownames.force = NA)
rowname <- as.numeric(RowNames) 
TN <- 0
TP <- 0
FN <- 0
FP <- 0
for(i in 1:189)
{
for(testandave in 1:1682)
{
if(k[i]==1){
if(Test[i,testandave] > 3 && ave1[1,testandave] > 3 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=3 && ave1[1,testandave]<=3 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>3 && ave1[1,testandave]<=3 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 3 && ave1[1,testandave]>3 && Test[i,testandave]!=0)
{
FP <- FP+1
}
}
else if(k[i]==2){
if(Test[i,testandave] > 3 && ave2[1,testandave] > 3 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=3 && ave2[1,testandave]<=3 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>3 && ave2[1,testandave]<=3 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 3 && ave2[1,testandave]>3 && Test[i,testandave]!=0)
{
FP <- FP+1
}
}
else if(k[i]==3){
if(Test[i,testandave] > 3 && ave3[1,testandave] > 3 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=3 && ave3[1,testandave]<=3 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>3 && ave3[1,testandave]<=3 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 3 && ave3[1,testandave]>3 && Test[i,testandave]!=0)
{
FP <- FP+1
}
}
}
}
TP
FN
FP
TN
Accuracy=(TP+TN)/(TP+FP+TN+FN)
Precision=TP/(TP+FP)
Recall=TP/(TP+FN)
Accuracy
Precision
Recall
RowNames<- data.matrix(Rows, rownames.force = NA)
rowname <- as.numeric(RowNames) 
TN <- 0
TP <- 0
FN <- 0
FP <- 0
for(i in 1:189)
{
for(testandave in 1:1682)
{
if(k[i]==1){
if(Test[i,testandave] > 4 && ave1[1,testandave] > 4 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=4 && ave1[1,testandave]<=4 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>4 && ave1[1,testandave]<=4 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 4 && ave1[1,testandave]>4 && Test[i,testandave]!=0)
{
FP <- FP+1
}
}
else if(k[i]==2){
if(Test[i,testandave] > 4 && ave2[1,testandave] > 4 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=4 && ave2[1,testandave]<=4 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>4 && ave2[1,testandave]<=4 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 4 && ave2[1,testandave]>4 && Test[i,testandave]!=0)
{
FP <- FP+1
}
}
else if(k[i]==3){
if(Test[i,testandave] > 4 && ave3[1,testandave] > 4 && Test[i,testandave]!=0)
{
TP <- TP + 1
}
else if(Test[i,testandave]<=4 && ave3[1,testandave]<=4 && Test[i,testandave]!=0)
{
TN <- TN + 1
}
else if(Test[i,testandave]>4 && ave3[1,testandave]<=4 && Test[i,testandave]!=0)
{
FN <- FN + 1
}
else if(Test[i,testandave] <= 4 && ave3[1,testandave]>4 && Test[i,testandave]!=0)
{
FP <- FP+1
}
}
}
}
TP
FN
FP
TN
Accuracy=(TP+TN)/(TP+FP+TN+FN)
Precision=TP/(TP+FP)
Recall=TP/(TP+FN)
Accuracy
Precision
Recall
save.image("C:\\Users\\Amirhossein EP\\Documents\\my projects R\\Final Type 1 - 3clusters\\Final Type 2 - 3cluster.RData")
